import google.generativeai as genai
import arxiv
from typing import Dict, List
import os

class ResearchApp:
    def __init__(self):
        # Inisialisasi Gemini
        genai.configure(api_key=os.getenv('AIzaSyA3v617hxW0HbA-6OQOM1tC79JBl82RmdQ'))
        self.gemini_model = genai.GenerativeModel('gemini-1.0-pro')
        
    def search_papers(self, topic: str, max_results: int = 5) -> Dict:
        """Pencarian nyata menggunakan ArXiv API"""
        try:
            client = arxiv.Client()
            search = arxiv.Search(
                query=topic,
                max_results=max_results,
                sort_by=arxiv.SortCriterion.Relevance
            )
            
            papers = []
            for result in client.results(search):
                papers.append({
                    "title": result.title,
                    "id": result.entry_id.split('/')[-1],
                    "authors": [a.name for a in result.authors],
                    "summary": result.summary,
                    "pdf_url": result.pdf_url
                })
                
            return {"status": "success", "papers": papers}
            
        except Exception as e:
            return {"error": str(e)}
    
    def research_assistant(self, query: str) -> Dict:
        """Menggunakan Gemini untuk respons penelitian"""
        try:
            prompt = f"""
            Anda adalah asisten penelitian akademis. Berikan jawaban mendalam untuk:
            '{query}'. Sertakan referensi teoretis jika memungkinkan.
            """
            
            response = self.gemini_model.generate_content(prompt)
            return {
                "response": response.text,
                "sources": "Generated by Gemini AI"
            }
        except Exception as e:
            return {"error": str(e)}
    
    # [Tetap pertahankan method get_paper_content dan extract_info yang ada]
